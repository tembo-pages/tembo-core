{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tembo \u00a4 from tembo import Success v0.0.8","title":"Overview"},{"location":"#tembo","text":"from tembo import Success v0.0.8","title":"Tembo"},{"location":"cli_reference/main/","text":"CLI Reference \u00a4 tembo \u00a4 Tembo - an organiser for work notes. Usage: tembo <options> COMMAND [ARGS]... Options: Name Type Description Default -v , --version boolean Show the version and exit. False --help boolean Show this message and exit. False list \u00a4 List all scopes defined in the config.yml. Usage: tembo list <options> Options: Name Type Description Default --help boolean Show this message and exit. False new \u00a4 Create a new page. <scope> The name of the scope in the config.yml. <inputs> Any input token values that are defined in the config.yml for this scope. Accepts multiple inputs separated by a space. Example: tembo new meeting my_presentation Usage: tembo new <options> <scope> <inputs> Options: Name Type Description Default --dry-run boolean Show the full path of the page to be created without actually saving the page to disk and exit. False --example boolean Show the example command in the config.yml if it exists and exit. False --help boolean Show this message and exit. False","title":"tembo"},{"location":"cli_reference/main/#cli-reference","text":"","title":"CLI Reference"},{"location":"cli_reference/main/#tembo","text":"Tembo - an organiser for work notes. Usage: tembo <options> COMMAND [ARGS]... Options: Name Type Description Default -v , --version boolean Show the version and exit. False --help boolean Show this message and exit. False","title":"tembo"},{"location":"cli_reference/main/#list","text":"List all scopes defined in the config.yml. Usage: tembo list <options> Options: Name Type Description Default --help boolean Show this message and exit. False","title":"list"},{"location":"cli_reference/main/#new","text":"Create a new page. <scope> The name of the scope in the config.yml. <inputs> Any input token values that are defined in the config.yml for this scope. Accepts multiple inputs separated by a space. Example: tembo new meeting my_presentation Usage: tembo new <options> <scope> <inputs> Options: Name Type Description Default --dry-run boolean Show the full path of the page to be created without actually saving the page to disk and exit. False --example boolean Show the example command in the config.yml if it exists and exit. False --help boolean Show this message and exit. False","title":"new"},{"location":"code_reference/SUMMARY/","text":"__init__.py __main__.py _version.py cli __init__.py cli.py exceptions.py journal __init__.py pages.py utils __init__.py","title":"SUMMARY"},{"location":"code_reference/__init__/","text":"Tembo package. A simple folder organiser for your work notes.","title":"__init__.py"},{"location":"code_reference/__main__/","text":"Entrypoint module. Used when using python -m tembo to invoke the CLI.","title":"__main__.py"},{"location":"code_reference/_version/","text":"Module containing the version of tembo.","title":"_version.py"},{"location":"code_reference/exceptions/","text":"Module containing custom exceptions. BasePathDoesNotExistError ( Exception ) \u00a4 Raised if the base path does not exist. EmptyConfigYML ( Exception ) \u00a4 Raised if the config.yml file is empty. MandatoryKeyNotFound ( Exception ) \u00a4 Raised if a mandatory key is not found in the config.yml. MismatchedTokenError ( Exception ) \u00a4 Raised when the number of input tokens does not match the user config. Attributes: Name Type Description expected int number of input tokens in the user config. given int number of input tokens passed in. __init__ ( self , expected , given ) special \u00a4 Initialise the exception. Parameters: Name Type Description Default expected int number of input tokens in the user config. required given int number of input tokens passed in. required Source code in tembo/exceptions.py def __init__ ( self , expected : int , given : int ) -> None : \"\"\" Initialise the exception. Args: expected (int): number of input tokens in the user config. given (int): number of input tokens passed in. \"\"\" self . expected = expected self . given = given super () . __init__ () MissingConfigYML ( Exception ) \u00a4 Raised if the config.yml file is missing. ScopeNotFound ( Exception ) \u00a4 Raised if the scope does not exist in the config.yml. ScopedPageAlreadyExists ( Exception ) \u00a4 Raised if the scoped page file already exists. TemplateFileNotFoundError ( Exception ) \u00a4 Raised if the template file does not exist.","title":"exceptions.py"},{"location":"code_reference/exceptions/#tembo.exceptions.BasePathDoesNotExistError","text":"Raised if the base path does not exist.","title":"BasePathDoesNotExistError"},{"location":"code_reference/exceptions/#tembo.exceptions.EmptyConfigYML","text":"Raised if the config.yml file is empty.","title":"EmptyConfigYML"},{"location":"code_reference/exceptions/#tembo.exceptions.MandatoryKeyNotFound","text":"Raised if a mandatory key is not found in the config.yml.","title":"MandatoryKeyNotFound"},{"location":"code_reference/exceptions/#tembo.exceptions.MismatchedTokenError","text":"Raised when the number of input tokens does not match the user config. Attributes: Name Type Description expected int number of input tokens in the user config. given int number of input tokens passed in.","title":"MismatchedTokenError"},{"location":"code_reference/exceptions/#tembo.exceptions.MismatchedTokenError.__init__","text":"Initialise the exception. Parameters: Name Type Description Default expected int number of input tokens in the user config. required given int number of input tokens passed in. required Source code in tembo/exceptions.py def __init__ ( self , expected : int , given : int ) -> None : \"\"\" Initialise the exception. Args: expected (int): number of input tokens in the user config. given (int): number of input tokens passed in. \"\"\" self . expected = expected self . given = given super () . __init__ ()","title":"__init__()"},{"location":"code_reference/exceptions/#tembo.exceptions.MissingConfigYML","text":"Raised if the config.yml file is missing.","title":"MissingConfigYML"},{"location":"code_reference/exceptions/#tembo.exceptions.ScopeNotFound","text":"Raised if the scope does not exist in the config.yml.","title":"ScopeNotFound"},{"location":"code_reference/exceptions/#tembo.exceptions.ScopedPageAlreadyExists","text":"Raised if the scoped page file already exists.","title":"ScopedPageAlreadyExists"},{"location":"code_reference/exceptions/#tembo.exceptions.TemplateFileNotFoundError","text":"Raised if the template file does not exist.","title":"TemplateFileNotFoundError"},{"location":"code_reference/cli/__init__/","text":"Subpackage that contains the CLI application.","title":"__init__.py"},{"location":"code_reference/cli/cli/","text":"Submodule which contains the CLI implementation using Click. cli_message ( message ) \u00a4 Relay a message to the user using the CLI. Parameters: Name Type Description Default message str THe message to be displayed. required Source code in tembo/cli/cli.py def cli_message ( message : str ) -> None : \"\"\" Relay a message to the user using the CLI. Args: message (str): THe message to be displayed. \"\"\" click . echo ( f \"[TEMBO] { message } \ud83d\udc18\" )","title":"cli.py"},{"location":"code_reference/cli/cli/#tembo.cli.cli.cli_message","text":"Relay a message to the user using the CLI. Parameters: Name Type Description Default message str THe message to be displayed. required Source code in tembo/cli/cli.py def cli_message ( message : str ) -> None : \"\"\" Relay a message to the user using the CLI. Args: message (str): THe message to be displayed. \"\"\" click . echo ( f \"[TEMBO] { message } \ud83d\udc18\" )","title":"cli_message()"},{"location":"code_reference/journal/__init__/","text":"Subpackage containing the logic to create Tembo journals & pages.","title":"__init__.py"},{"location":"code_reference/journal/pages/","text":"Submodule containing the factories & page objects to create Tembo pages. Page \u00a4 Abstract Page class. This interface is used to define a Page object. A Page represents a note/page that will be saved to disk. Abstract This object is an abstract base class and should be implemented for each Page type. path : pathlib . Path property readonly \u00a4 When implemented this should return the full path of the page including the filename. Returns: Type Description pathlib.Path the path as a Path object. Abstract This property is abstract and should be implemented for each Page type. __init__ ( self , path , page_content ) special \u00a4 When implemented this should initalise a Page object. Parameters: Name Type Description Default path pathlib.Path the full path of the page including the filename as a Path . required page_content str the contents of the page. required Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def __init__ ( self , path : pathlib . Path , page_content : str ) -> None : \"\"\" When implemented this should initalise a Page object. Args: path (pathlib.Path): the full path of the page including the filename as a [Path][pathlib.Path]. page_content (str): the contents of the page. !!! abstract This method is abstract and should be implemented for each `Page` type. \"\"\" raise NotImplementedError save_to_disk ( self ) \u00a4 When implemented this should save the page to disk. Returns: Type Description tembo.utils.Success A Tembo Success object. Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def save_to_disk ( self ) -> tembo . utils . Success : \"\"\" When implemented this should save the page to disk. Returns: tembo.utils.Success: A Tembo [Success][tembo.utils.__init__.Success] object. !!! abstract This method is abstract and should be implemented for each `Page` type. \"\"\" raise NotImplementedError PageCreator \u00a4 A PageCreator factory base class. This factory should implement methods to create Page objects. Abstract This factory is an abstract base class and should be implemented for each Page type. The private methods _check_base_path_exists() _convert_base_path_to_path() _load_template() are not abstract and are shared between all Page types. options : PageCreatorOptions property readonly \u00a4 When implemented this should return the PageCreatorOptions on the class. Returns: Type Description PageCreatorOptions the instance of PageCreatorOptions set on the class. Abstract This method is abstract and should be implemented for each Page type. __init__ ( self , options ) special \u00a4 When implemented this should initialise the PageCreator factory. Parameters: Name Type Description Default options PageCreatorOptions An instance of PageCreatorOptions required Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def __init__ ( self , options : PageCreatorOptions ) -> None : \"\"\" When implemented this should initialise the `PageCreator` factory. Args: options (PageCreatorOptions): An instance of [PageCreatorOptions][tembo.journal.pages.PageCreatorOptions] !!! abstract This method is abstract and should be implemented for each [Page][tembo.journal.pages.Page] type. \"\"\" raise NotImplementedError create_page ( self ) \u00a4 When implemented this should create a Page object. Returns: Type Description Page an implemented instance of Page such as ScopedPage . Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def create_page ( self ) -> Page : \"\"\" When implemented this should create a `Page` object. Returns: Page: an implemented instance of [Page][tembo.journal.pages.Page] such as [ScopedPage][tembo.journal.pages.ScopedPage]. !!! abstract This method is abstract and should be implemented for each [Page][tembo.journal.pages.Page] type. \"\"\" raise NotImplementedError PageCreatorOptions dataclass \u00a4 Options dataclass to create a Page. This is passed to an implemented instance of PageCreator Attributes: Name Type Description base_path str The base path. page_path str The path of the page relative to the base path. filename str The filename of the page. extension str The extension of the page. name str The name of the scope. user_input Collection[str] | None User input tokens. example str | None User example command. template_path str | None The path which contains the templates. This should be the full path and not relative to the base path. template_filename str | None The template filename with extension relative to the template path. ScopedPage ( Page ) \u00a4 A page that uses substitute tokens. Attributes: Name Type Description path pathlib.Path a Path object of the page's filepath including the filename. page_content str the content of the page from the template. path : pathlib . Path property readonly \u00a4 Return the full path of the page. Returns: Type Description pathlib.path The full path of the page as a Path object. __init__ ( self , path , page_content ) special \u00a4 Initalise a scoped page object. Parameters: Name Type Description Default path pathlib.Path a Path object of the page's filepath including the filename. required page_content str the content of the page from the template. required Source code in tembo/journal/pages.py def __init__ ( self , path : pathlib . Path , page_content : str ) -> None : \"\"\" Initalise a scoped page object. Args: path (pathlib.Path): a [Path][pathlib.Path] object of the page's filepath including the filename. page_content (str): the content of the page from the template. \"\"\" self . _path = path self . page_content = page_content __str__ ( self ) special \u00a4 Return a str representation of a ScopedPage . Examples: >>> str(ScopedPage(Path(\"/home/bob/tembo/meetings/my_meeting_0.md\"), \"\")) ScopedPage(\"/home/bob/tembo/meetings/my_meeting_0.md\") Returns: Type Description str The ScopedPage as a str . Source code in tembo/journal/pages.py def __str__ ( self ) -> str : \"\"\" Return a `str` representation of a `ScopedPage`. Examples: ``` >>> str(ScopedPage(Path(\"/home/bob/tembo/meetings/my_meeting_0.md\"), \"\")) ScopedPage(\"/home/bob/tembo/meetings/my_meeting_0.md\") ``` Returns: str: The `ScopedPage` as a `str`. \"\"\" return f 'ScopedPage(\" { self . path } \")' save_to_disk ( self ) \u00a4 Save the scoped page to disk and write the page_content . Exceptions: Type Description exceptions.ScopedPageAlreadyExists If the page already exists a ScopedPageAlreadyExists exception is raised. Returns: Type Description tembo.utils.Success A Success with the path of the ScopedPage as the message. Source code in tembo/journal/pages.py def save_to_disk ( self ) -> tembo . utils . Success : \"\"\" Save the scoped page to disk and write the `page_content`. Raises: exceptions.ScopedPageAlreadyExists: If the page already exists a [ScopedPageAlreadyExists][tembo.exceptions.ScopedPageAlreadyExists] exception is raised. Returns: tembo.utils.Success: A [Success][tembo.utils.__init__.Success] with the path of the ScopedPage as the message. \"\"\" # create the parent directories scoped_page_file = pathlib . Path ( self . path ) scoped_page_file . parents [ 0 ] . mkdir ( parents = True , exist_ok = True ) if scoped_page_file . exists (): raise exceptions . ScopedPageAlreadyExists ( f \" { self . path } already exists\" ) with scoped_page_file . open ( \"w\" , encoding = \"utf-8\" ) as scoped_page : scoped_page . write ( self . page_content ) return tembo . utils . Success ( str ( self . path )) ScopedPageCreator ( PageCreator ) \u00a4 Factory to create a scoped page. Attributes: Name Type Description base_path str base path of tembo. page_path str path of the page relative to the base path. filename str filename relative to the page path. extension str extension of file. options : PageCreatorOptions property readonly \u00a4 Return the PageCreatorOptions instance set on the factory. Returns: Type Description PageCreatorOptions An instance of PageCreatorOptions . __init__ ( self , options ) special \u00a4 Initialise a ScopedPageCreator factory. Parameters: Name Type Description Default options PageCreatorOptions An instance of PageCreatorOptions . required Source code in tembo/journal/pages.py def __init__ ( self , options : PageCreatorOptions ) -> None : \"\"\" Initialise a `ScopedPageCreator` factory. Args: options (PageCreatorOptions): An instance of [PageCreatorOptions][tembo.journal.pages.PageCreatorOptions]. \"\"\" self . _all_input_tokens : list [ str ] = [] self . _options = options create_page ( self ) \u00a4 Create a ScopedPage object. This method will Check the base_path exists Verify the input tokens match the number defined in the config.yml Substitue the input tokens in the filepath Load the template contents and substitue the input tokens Exceptions: Type Description exceptions.MismatchedTokenError Raises MismatchedTokenError if the number of input tokens does not match the number of unique input tokens defined. exceptions.BasePathDoesNotExistError Raises BasePathDoesNotExistError if the base path does not exist. exceptions.TemplateFileNotFoundError Raises TemplateFileNotFoundError if the template file is specified but not found. Returns: Type Description Page A ScopedPage object using the PageCreatorOptions . Source code in tembo/journal/pages.py def create_page ( self ) -> Page : \"\"\" Create a [ScopedPage][tembo.journal.pages.ScopedPage] object. This method will - Check the `base_path` exists - Verify the input tokens match the number defined in the `config.yml` - Substitue the input tokens in the filepath - Load the template contents and substitue the input tokens Raises: exceptions.MismatchedTokenError: Raises [MismatchedTokenError][tembo.exceptions.MismatchedTokenError] if the number of input tokens does not match the number of unique input tokens defined. exceptions.BasePathDoesNotExistError: Raises [BasePathDoesNotExistError][tembo.exceptions.BasePathDoesNotExistError] if the base path does not exist. exceptions.TemplateFileNotFoundError: Raises [TemplateFileNotFoundError][tembo.exceptions.TemplateFileNotFoundError] if the template file is specified but not found. Returns: Page: A [ScopedPage][tembo.journal.pages.ScopedPage] object using the `PageCreatorOptions`. \"\"\" try : self . _check_base_path_exists () except exceptions . BasePathDoesNotExistError as base_path_does_not_exist_error : raise base_path_does_not_exist_error self . _all_input_tokens = self . _get_input_tokens () try : self . _verify_input_tokens () except exceptions . MismatchedTokenError as mismatched_token_error : raise mismatched_token_error path = self . _convert_base_path_to_path () path = pathlib . Path ( self . _substitute_tokens ( str ( path ))) try : template_contents = self . _load_template () except exceptions . TemplateFileNotFoundError as template_not_found_error : raise template_not_found_error if self . options . template_filename is not None : template_contents = self . _substitute_tokens ( template_contents ) return ScopedPage ( path , template_contents )","title":"pages.py"},{"location":"code_reference/journal/pages/#tembo.journal.pages.Page","text":"Abstract Page class. This interface is used to define a Page object. A Page represents a note/page that will be saved to disk. Abstract This object is an abstract base class and should be implemented for each Page type.","title":"Page"},{"location":"code_reference/journal/pages/#tembo.journal.pages.Page.path","text":"When implemented this should return the full path of the page including the filename. Returns: Type Description pathlib.Path the path as a Path object. Abstract This property is abstract and should be implemented for each Page type.","title":"path"},{"location":"code_reference/journal/pages/#tembo.journal.pages.Page.__init__","text":"When implemented this should initalise a Page object. Parameters: Name Type Description Default path pathlib.Path the full path of the page including the filename as a Path . required page_content str the contents of the page. required Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def __init__ ( self , path : pathlib . Path , page_content : str ) -> None : \"\"\" When implemented this should initalise a Page object. Args: path (pathlib.Path): the full path of the page including the filename as a [Path][pathlib.Path]. page_content (str): the contents of the page. !!! abstract This method is abstract and should be implemented for each `Page` type. \"\"\" raise NotImplementedError","title":"__init__()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.Page.save_to_disk","text":"When implemented this should save the page to disk. Returns: Type Description tembo.utils.Success A Tembo Success object. Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def save_to_disk ( self ) -> tembo . utils . Success : \"\"\" When implemented this should save the page to disk. Returns: tembo.utils.Success: A Tembo [Success][tembo.utils.__init__.Success] object. !!! abstract This method is abstract and should be implemented for each `Page` type. \"\"\" raise NotImplementedError","title":"save_to_disk()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.PageCreator","text":"A PageCreator factory base class. This factory should implement methods to create Page objects. Abstract This factory is an abstract base class and should be implemented for each Page type. The private methods _check_base_path_exists() _convert_base_path_to_path() _load_template() are not abstract and are shared between all Page types.","title":"PageCreator"},{"location":"code_reference/journal/pages/#tembo.journal.pages.PageCreator.options","text":"When implemented this should return the PageCreatorOptions on the class. Returns: Type Description PageCreatorOptions the instance of PageCreatorOptions set on the class. Abstract This method is abstract and should be implemented for each Page type.","title":"options"},{"location":"code_reference/journal/pages/#tembo.journal.pages.PageCreator.__init__","text":"When implemented this should initialise the PageCreator factory. Parameters: Name Type Description Default options PageCreatorOptions An instance of PageCreatorOptions required Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def __init__ ( self , options : PageCreatorOptions ) -> None : \"\"\" When implemented this should initialise the `PageCreator` factory. Args: options (PageCreatorOptions): An instance of [PageCreatorOptions][tembo.journal.pages.PageCreatorOptions] !!! abstract This method is abstract and should be implemented for each [Page][tembo.journal.pages.Page] type. \"\"\" raise NotImplementedError","title":"__init__()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.PageCreator.create_page","text":"When implemented this should create a Page object. Returns: Type Description Page an implemented instance of Page such as ScopedPage . Abstract This method is abstract and should be implemented for each Page type. Source code in tembo/journal/pages.py @abstractmethod def create_page ( self ) -> Page : \"\"\" When implemented this should create a `Page` object. Returns: Page: an implemented instance of [Page][tembo.journal.pages.Page] such as [ScopedPage][tembo.journal.pages.ScopedPage]. !!! abstract This method is abstract and should be implemented for each [Page][tembo.journal.pages.Page] type. \"\"\" raise NotImplementedError","title":"create_page()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.PageCreatorOptions","text":"Options dataclass to create a Page. This is passed to an implemented instance of PageCreator Attributes: Name Type Description base_path str The base path. page_path str The path of the page relative to the base path. filename str The filename of the page. extension str The extension of the page. name str The name of the scope. user_input Collection[str] | None User input tokens. example str | None User example command. template_path str | None The path which contains the templates. This should be the full path and not relative to the base path. template_filename str | None The template filename with extension relative to the template path.","title":"PageCreatorOptions"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPage","text":"A page that uses substitute tokens. Attributes: Name Type Description path pathlib.Path a Path object of the page's filepath including the filename. page_content str the content of the page from the template.","title":"ScopedPage"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPage.path","text":"Return the full path of the page. Returns: Type Description pathlib.path The full path of the page as a Path object.","title":"path"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPage.__init__","text":"Initalise a scoped page object. Parameters: Name Type Description Default path pathlib.Path a Path object of the page's filepath including the filename. required page_content str the content of the page from the template. required Source code in tembo/journal/pages.py def __init__ ( self , path : pathlib . Path , page_content : str ) -> None : \"\"\" Initalise a scoped page object. Args: path (pathlib.Path): a [Path][pathlib.Path] object of the page's filepath including the filename. page_content (str): the content of the page from the template. \"\"\" self . _path = path self . page_content = page_content","title":"__init__()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPage.__str__","text":"Return a str representation of a ScopedPage . Examples: >>> str(ScopedPage(Path(\"/home/bob/tembo/meetings/my_meeting_0.md\"), \"\")) ScopedPage(\"/home/bob/tembo/meetings/my_meeting_0.md\") Returns: Type Description str The ScopedPage as a str . Source code in tembo/journal/pages.py def __str__ ( self ) -> str : \"\"\" Return a `str` representation of a `ScopedPage`. Examples: ``` >>> str(ScopedPage(Path(\"/home/bob/tembo/meetings/my_meeting_0.md\"), \"\")) ScopedPage(\"/home/bob/tembo/meetings/my_meeting_0.md\") ``` Returns: str: The `ScopedPage` as a `str`. \"\"\" return f 'ScopedPage(\" { self . path } \")'","title":"__str__()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPage.save_to_disk","text":"Save the scoped page to disk and write the page_content . Exceptions: Type Description exceptions.ScopedPageAlreadyExists If the page already exists a ScopedPageAlreadyExists exception is raised. Returns: Type Description tembo.utils.Success A Success with the path of the ScopedPage as the message. Source code in tembo/journal/pages.py def save_to_disk ( self ) -> tembo . utils . Success : \"\"\" Save the scoped page to disk and write the `page_content`. Raises: exceptions.ScopedPageAlreadyExists: If the page already exists a [ScopedPageAlreadyExists][tembo.exceptions.ScopedPageAlreadyExists] exception is raised. Returns: tembo.utils.Success: A [Success][tembo.utils.__init__.Success] with the path of the ScopedPage as the message. \"\"\" # create the parent directories scoped_page_file = pathlib . Path ( self . path ) scoped_page_file . parents [ 0 ] . mkdir ( parents = True , exist_ok = True ) if scoped_page_file . exists (): raise exceptions . ScopedPageAlreadyExists ( f \" { self . path } already exists\" ) with scoped_page_file . open ( \"w\" , encoding = \"utf-8\" ) as scoped_page : scoped_page . write ( self . page_content ) return tembo . utils . Success ( str ( self . path ))","title":"save_to_disk()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPageCreator","text":"Factory to create a scoped page. Attributes: Name Type Description base_path str base path of tembo. page_path str path of the page relative to the base path. filename str filename relative to the page path. extension str extension of file.","title":"ScopedPageCreator"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPageCreator.options","text":"Return the PageCreatorOptions instance set on the factory. Returns: Type Description PageCreatorOptions An instance of PageCreatorOptions .","title":"options"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPageCreator.__init__","text":"Initialise a ScopedPageCreator factory. Parameters: Name Type Description Default options PageCreatorOptions An instance of PageCreatorOptions . required Source code in tembo/journal/pages.py def __init__ ( self , options : PageCreatorOptions ) -> None : \"\"\" Initialise a `ScopedPageCreator` factory. Args: options (PageCreatorOptions): An instance of [PageCreatorOptions][tembo.journal.pages.PageCreatorOptions]. \"\"\" self . _all_input_tokens : list [ str ] = [] self . _options = options","title":"__init__()"},{"location":"code_reference/journal/pages/#tembo.journal.pages.ScopedPageCreator.create_page","text":"Create a ScopedPage object. This method will Check the base_path exists Verify the input tokens match the number defined in the config.yml Substitue the input tokens in the filepath Load the template contents and substitue the input tokens Exceptions: Type Description exceptions.MismatchedTokenError Raises MismatchedTokenError if the number of input tokens does not match the number of unique input tokens defined. exceptions.BasePathDoesNotExistError Raises BasePathDoesNotExistError if the base path does not exist. exceptions.TemplateFileNotFoundError Raises TemplateFileNotFoundError if the template file is specified but not found. Returns: Type Description Page A ScopedPage object using the PageCreatorOptions . Source code in tembo/journal/pages.py def create_page ( self ) -> Page : \"\"\" Create a [ScopedPage][tembo.journal.pages.ScopedPage] object. This method will - Check the `base_path` exists - Verify the input tokens match the number defined in the `config.yml` - Substitue the input tokens in the filepath - Load the template contents and substitue the input tokens Raises: exceptions.MismatchedTokenError: Raises [MismatchedTokenError][tembo.exceptions.MismatchedTokenError] if the number of input tokens does not match the number of unique input tokens defined. exceptions.BasePathDoesNotExistError: Raises [BasePathDoesNotExistError][tembo.exceptions.BasePathDoesNotExistError] if the base path does not exist. exceptions.TemplateFileNotFoundError: Raises [TemplateFileNotFoundError][tembo.exceptions.TemplateFileNotFoundError] if the template file is specified but not found. Returns: Page: A [ScopedPage][tembo.journal.pages.ScopedPage] object using the `PageCreatorOptions`. \"\"\" try : self . _check_base_path_exists () except exceptions . BasePathDoesNotExistError as base_path_does_not_exist_error : raise base_path_does_not_exist_error self . _all_input_tokens = self . _get_input_tokens () try : self . _verify_input_tokens () except exceptions . MismatchedTokenError as mismatched_token_error : raise mismatched_token_error path = self . _convert_base_path_to_path () path = pathlib . Path ( self . _substitute_tokens ( str ( path ))) try : template_contents = self . _load_template () except exceptions . TemplateFileNotFoundError as template_not_found_error : raise template_not_found_error if self . options . template_filename is not None : template_contents = self . _substitute_tokens ( template_contents ) return ScopedPage ( path , template_contents )","title":"create_page()"},{"location":"code_reference/utils/__init__/","text":"Subpackage containing utility objects. Success dataclass \u00a4 A Tembo success object. This is returned from Page methods such as save_to_disk() Attributes: Name Type Description message str A success message.","title":"__init__.py"},{"location":"code_reference/utils/__init__/#tembo.utils.__init__.Success","text":"A Tembo success object. This is returned from Page methods such as save_to_disk() Attributes: Name Type Description message str A success message.","title":"Success"},{"location":"home/changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . v1.0.0 - 2021-12-26 \u00a4 Documentation \u00a4 Update license documentation ( fad505 ) Features \u00a4 Initial commit ( fb7fec ) Build \u00a4 Update panaetius to 2.3.2 ( 737d24 ) Update dependencies to latest versions ( f5cfa0 )","title":"Changelog"},{"location":"home/changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"home/changelog/#v100-2021-12-26","text":"","title":"v1.0.0 - 2021-12-26"},{"location":"home/changelog/#documentation","text":"Update license documentation ( fad505 )","title":"Documentation"},{"location":"home/changelog/#features","text":"Initial commit ( fb7fec )","title":"Features"},{"location":"home/changelog/#build","text":"Update panaetius to 2.3.2 ( 737d24 ) Update dependencies to latest versions ( f5cfa0 )","title":"Build"},{"location":"home/license/","text":"ISC License Copyright (c) 2021 Daniel Tomlinson Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}